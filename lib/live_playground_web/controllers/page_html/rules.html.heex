<.header class="mb-6 xl:mb-8 2xl:mb-10">
  Coding Conventions
  <:subtitle>
    These conventions showcase how I keep code consistent in this LiveView playground.
  </:subtitle>
</.header>
<div class="space-y-6 xl:space-y-8 2xl:space-y-10 mb-6 xl:mb-8 2xl:mb-10">
  <section class="prose">
    <h2>Function Ordering Convention</h2>
    <ol>
      <li>Documentation and Imports</li>
      <li><code>mount/3</code>, any helpers it uses placed directly after</li>
      <li><code>handle_params/3</code>, any helpers it uses placed directly after</li>
      <ul>
        <li>
          For helpers shared between <code>mount</code> and <code>handle_params</code>,
          and for helpers shared between helpers, place them right after the highest-level function that uses them.
        </li>
      </ul>
      <li><code>render/1</code> (if present)</li>
      <li><code>handle_event/3</code></li>
      <li><code>handle_info/2</code></li>
      <li>Helpers for <code>render</code>, <code>handle_event</code>, and <code>handle_info</code>, placed at the end.</li>
      <ul>
        <li>
          For helpers shared between helpers, place them right after the highest-level function that uses them.
        </li>
      </ul>
    </ol>
    <p>
      While this order may not suit every application, it works well for this playground, where I aim to present code breakdowns alongside the code. By following the stepdown rule—where each function is immediately followed by those it directly depends on—the code breakdown remains easy to read top-to-bottom.
    </p>
  </section>
  <section class="prose">
    <h2>Convention for Ordering <code>assign</code> and <code>stream</code> Calls</h2>
    <p>
      Update core UI-related state before handling data streams. This ensures that any code referencing assigned values works with the latest state before the stream update is applied.
    </p>
    <div class="not-prose rounded-lg overflow-auto overscroll-auto border border-gray-200 text-xs p-6">
      <%= Makeup.highlight("socket
|> assign(:options, options)
|> stream(:data, items, reset: true)
") |> raw() %>
    </div>
  </section>
  <section class="prose">
    <h2>Convention for Choosing Between Concise and Expanded Code</h2>
    <p>
      Use an expanded version if setting multiple variables or performing complex logic. This approach makes it easier to follow and modify each part.
    </p>
    <div class="not-prose rounded-lg overflow-auto overscroll-auto border border-gray-200 text-xs p-6">
      <%= Makeup.highlight("data = fetch_data(params)
count = count_items(data)

socket =
  socket
  |> assign(:count, count)
  |> assign(:data, data)
") |> raw() %>
    </div>
    <p>For a single variable or straightforward logic, a concise version keeps code simple and focused.</p>
    <div class="not-prose rounded-lg overflow-auto overscroll-auto border border-gray-200 text-xs p-6">
      <%= Makeup.highlight("socket
|> assign(:data, fetch_data(params))
") |> raw() %>
    </div>
  </section>
  <section class="prose">
    <h2>Naming Convention for Helper Functions</h2>
    <p>
      For <strong>State-Manipulating Functions</strong>
      (returning <code>socket</code>) use action-oriented verbs (e.g., <code>init</code>, <code>apply_options</code>, <code>apply_action</code>).
    </p>
    <p>
      For <strong>Data Transformation Functions</strong>
      (modifying variables or data structures) use verbs indicating the transformation (e.g., <code>update_params</code>, <code>to_integer</code>).
    </p>
    <p>
      For <strong>Value-Retrieving Functions</strong>
      use the <code>get_</code>
      prefix (e.g., <code>get_existing_page</code>, <code>get_pagination_url</code>, <code>get_allowed_per_page</code>).
    </p>
  </section>
  <section class="prose">
    <h2>Convention for Including Module Names in Phoenix PubSub Messages</h2>
    <p>
      Always structure broadcasted messages as a tuple containing the module name, event, and resource.
    </p>
    <div class="not-prose rounded-lg overflow-auto overscroll-auto border border-gray-200 text-xs p-6">
      <%= Makeup.highlight("{__MODULE__, {event, resource}}") |> raw() %>
    </div>
  </section>
</div>
